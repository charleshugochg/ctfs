const express = require('express')

const router = express.Router()

const forge = require('./forge')
const { delay } = require('./utils')

const FONTNAMES = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"

const randomName = () => {
  return Array(8).fill(0).map(_ => FONTNAMES[Math.floor(Math.random() * FONTNAMES.length)]).join('')
}

const HOST = process.env.HOST || 'host.docker.internal'
const PORT = process.env.PORT || 3000

const FONT_TEMPLATE = `
@font-face {
  font-family: '$NAME$';
  src: url(data:application/x-font-woff;base64,$BASE64DATA$);
}
$SELECTOR$ {
  font-family: '$NAME$';
}
$ADDITIONAL_ENTRIES$
`

const ATTRIBUTE_TEMPLATE = '  $NAME$: $VALUE$;'
const ENTRY_TEMPLATE = `$SELECTOR$ {
$ATTRIBUTES$
}`

const MANAGER_TEMPLATE = `
@import url('http://${HOST}:${PORT}/api/font.css?$FONT_QUERY$');
@import url('http://${HOST}:${PORT}/api/manager.css?id=$NEXT_ID$');
`

const fontqueries = new Map();
const idchain = new Map();

router.get('/font.css', async (req, res) => {
  const { sequence, selector, additions } = req.query
  if (typeof sequence !== 'string' || typeof selector !== 'string')
    return res.status(400).end()
  const fontname = randomName()
  const b64 = await forge(fontname, sequence)
  const additional_entries = additions && Object.entries(additions).map(([sel, obj]) => {
    if (typeof obj !== 'object')
      return ''
    const attributes = Object.entries(obj).map(([attr, val]) => ATTRIBUTE_TEMPLATE
      .replace(/\$NAME\$/g, attr)
      .replace(/\$VALUE\$/g, val)
    ).join('\n')
    return ENTRY_TEMPLATE.replace(/\$SELECTOR\$/g, sel).replace(/\$ATTRIBUTES\$/g, attributes)
  }).join('\n')
  const result = FONT_TEMPLATE
    .replace(/\$NAME\$/g, fontname)
    .replace(/\$BASE64DATA\$/g, b64)
    .replace(/\$SELECTOR\$/g, selector)
    .replace(/\$ADDITIONAL_ENTRIES\$/g, additional_entries)
  res.type('text/css').send(result)
})

router.post('/manager', async (req, res) => {
  const { id, nextid } = req.query
  const { fontquery } = req.body
  if (!fontquery 
    || !id
    || id === ''
    || typeof nextid !== 'string'
  ) return res.status(400).send('Bad request.')
  if (!fontqueries.has(id)
    || idchain.has(id)
  ) return res.status(403).send('ID not found.')
  fontqueries.set(id, fontquery)
  idchain.set(id, nextid)
  res.status(200).end()
})

router.get('/manager.css', async (req, res) => {
  let fontquery, nextid
  const { id } = req.query
  if (!id || id === '')
    return res.status(400).end()
  fontqueries.set(id, null)
  while (!(fontquery = fontqueries.get(id))) {
    await delay(10)
  }
  while (typeof (nextid = idchain.has(id) && idchain.get(id)) !== 'string')
    await delay(10)
  fontqueries.delete(id)
  idchain.delete(id)
  const result = MANAGER_TEMPLATE
    .replace(/\$FONT_QUERY\$/g, fontquery)
    .replace(/\$NEXT_ID\$/g, nextid)
  res.type('text/css').send(result)
})

module.exports = router