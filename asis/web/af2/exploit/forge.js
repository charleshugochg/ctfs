const util = require('util')
const fs = require('fs')
const readFile = util.promisify(fs.readFile)
const writeFile = util.promisify(fs.writeFile)
const exec = util.promisify(require('child_process').exec)
const { nanoid } = require('nanoid')

const forgecmd = './forge.pe $SVGPATH$'
const base64cmd = 'cat $WOFFPATH$ | base64 -w 0'
const cleancmd = 'rm $SVGPATH$ $WOFFPATH$'

const TEMPDIR = './tmp'
let TEMPLATE = null

const load_template = async () => {
  const buf = await readFile('./hack.svg.template')
  TEMPLATE = buf.toString()
}

const forge = async (name, seq) => {
  if (TEMPLATE === null)
    await load_template()
  if (!fs.existsSync(TEMPDIR))
    fs.mkdirSync(TEMPDIR)
  const svgfont = TEMPLATE.replace(/\$NAME\$/g, name).replace(/\$SEQ\$/g, seq)
  const filename = nanoid()
  const svgpath = `${TEMPDIR}/${filename}.svg`
  const woffpath = `${TEMPDIR}/${filename}.woff`
  await writeFile(svgpath, svgfont) 
  await exec(forgecmd.replace(/\$SVGPATH\$/g, svgpath))
  const { stdout } = await exec(base64cmd.replace(/\$WOFFPATH\$/g, woffpath))
  await exec(cleancmd.replace(/\$WOFFPATH\$/g, woffpath).replace(/\$SVGPATH\$/g, svgpath))
  return stdout
}

module.exports = forge