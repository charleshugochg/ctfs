
function testiframe (testsrc) {
  return new Promise((resolve, reject) => {
    let frame = document.createElement('iframe')
    frame.setAttribute('loading', 'lazy')
    frame.src = testsrc
    frame.onload = function () {
      frame.remove()
      resolve()
    }
    new Promise(_ => setTimeout(() => {
      frame.remove()
      reject()
    }, 1000))
    document.body.appendChild(frame)
  })
}

function sleep (ms) {
  return new Promise(resolve => setTimeout(resolve, ms))
}

async function bisearch (start, end, cb) {
  let j = 0
  for (
    let i = start + Math.floor((end - start) / 2), isgreater;
    start < end && j++ < 20;
    start = isgreater ? i + 1 : start, end = isgreater ? end : i, i = start + Math.floor(
      (end - start) / 2
    )
  ) {
    isgreater = cb(i)
    if (isgreater instanceof Promise)
      isgreater = await isgreater
  }
  return start
}

async function lazysearch (start, end, unit, testsrc='/') {
  const spacer = document.createElement('div')
  document.body.appendChild(spacer)
  const r = await bisearch(start, end, async function (i) {
    spacer.style.height = i + unit
    try {
      await testiframe(testsrc)
      return true
    } catch (e) {
      return false
    }
  })
  spacer.remove()
  return r
}